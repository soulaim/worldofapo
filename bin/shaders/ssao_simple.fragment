
uniform sampler2D imageTexture;
uniform sampler2D depthTexture;

uniform float power;
varying vec2 texcoord;

float LinearizeDepth(float z)
{
	float n = 1.0; // camera z near
	float f = 200.0; // camera z far
	return (2.0 * n) / (f + n - z * (f - n));
}

void main()
{
	float e = power / 800.0;
	
	gl_FragColor = texture2D(imageTexture, texcoord);
	vec2 depthtexcoord = vec2(gl_FragCoord.x / 800.0, gl_FragCoord.y / 600.0);
	
	float screen_z  = texture2D(depthTexture, depthtexcoord).r;
	float surround1 = texture2D(depthTexture, depthtexcoord + vec2(e, 0)).r;
	float surround2 = texture2D(depthTexture, depthtexcoord + vec2(-e, 0)).r;
	float surround3 = texture2D(depthTexture, depthtexcoord + vec2(0, e)).r;
	float surround4 = texture2D(depthTexture, depthtexcoord + vec2(0, -e)).r;
	
	float z  = LinearizeDepth(screen_z);
	float z1 = LinearizeDepth(surround1);
	float z2 = LinearizeDepth(surround2);
	float z3 = LinearizeDepth(surround3);
	float z4 = LinearizeDepth(surround4);
	
	float val1 = max(z - z1, 0.0) * 10.0;
	float val2 = max(z - z2, 0.0) * 10.0;
	float val3 = max(z - z3, 0.0) * 10.0;
	float val4 = max(z - z4, 0.0) * 10.0;
	
	float epsilon = 1.0;
	float res = val1 + val2 + val3 + val4;
	//res = min(res, 1.0);
	//if(res <= epsilon)
	//	res = 1.0;
	
	float multiplier = max(1.0 - res, 0.0);
	gl_FragColor *= vec4(multiplier, multiplier, multiplier, 1.0);
}



