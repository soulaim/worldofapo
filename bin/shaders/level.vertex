const int MAX_LIGHTS = 71;
const int MAX_ACTIVE_LIGHTS = 4;

varying vec4 diffuse[MAX_ACTIVE_LIGHTS];
varying vec3 lightDir[MAX_ACTIVE_LIGHTS];
//varying vec3 halfVector[MAX_ACTIVE_LIGHTS];
varying float dist[MAX_ACTIVE_LIGHTS];
varying vec4 ambientGlobal;
varying vec3 normal;

varying float height;

attribute vec4 activeLights;
uniform vec4 ambientLight;

uniform vec4 lights[MAX_LIGHTS * 2];
const int POSITION = 0;
const int DIFFUSE = 1;

void main()
{
	int activeLight[MAX_ACTIVE_LIGHTS];
	activeLight[0] = int(activeLights.x);
	activeLight[1] = int(activeLights.y);
	activeLight[2] = int(activeLights.z);
	activeLight[3] = int(activeLights.w);

	vec4 ecPos;
	vec3 aux;
	
	normal = normalize(gl_NormalMatrix * gl_Normal);
	ecPos = gl_ModelViewMatrix * gl_Vertex;
	
	for(int i = 0; i < MAX_ACTIVE_LIGHTS; ++i)
	{
		int lightIndex = activeLight[i];
//		aux = vec3(gl_LightSource[lightIndex].position - ecPos);
		aux = vec3(gl_ModelViewMatrix * lights[lightIndex*2 + POSITION] - ecPos);
		lightDir[i] = normalize(aux);
		dist[i] = length(aux);
	
		//halfVector[i] = normalize(gl_LightSource[lightIndex].halfVector.xyz);
//		diffuse[i] = gl_FrontMaterial.diffuse * gl_LightSource[lightIndex].diffuse;
		diffuse[i] = gl_FrontMaterial.diffuse * lights[lightIndex*2 + DIFFUSE];
	}

	height = gl_Vertex.y;

	ambientGlobal = ambientLight * gl_FrontMaterial.ambient;
	gl_TexCoord[0] = gl_MultiTexCoord0;
	gl_TexCoord[1] = gl_MultiTexCoord1;
	gl_TexCoord[2] = gl_MultiTexCoord1;
	gl_TexCoord[3] = gl_MultiTexCoord1;
	gl_Position   = ftransform();
}

