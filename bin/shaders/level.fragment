const int MAX_ACTIVE_LIGHTS = 4;

varying vec4 position[MAX_ACTIVE_LIGHTS];
varying vec4 diffuse[MAX_ACTIVE_LIGHTS];
varying vec4 ecPos;

varying vec3 normal;
varying float height;

uniform vec4 ambientLight;

uniform sampler2D baseMap0;
uniform sampler2D baseMap1;
uniform sampler2D baseMap2;
uniform sampler2D baseMap3;

void main()
{
	vec4 light_color = ambientLight;
	vec3 n = normalize(normal);

//	gl_FragData[0] = vec4(n*0.5 + 0.5, 1); return;
	
	for(int i = 0; i < MAX_ACTIVE_LIGHTS; ++i)
	{
		vec3 aux = vec3(gl_ModelViewMatrix * position[i] - ecPos);
		vec3 lightDir = normalize(aux);
		float dist = length(aux);
		
		float NdotL = dot(n, normalize(lightDir));

		if(NdotL > 0.0)
		{
			float att = 1.0 / (0.0001 + 0.0020 * dist * dist);
			light_color += att * (diffuse[i] * NdotL);
		}
	}
	
	float weigth0 = 80.0 / (abs(height +  3.0) + 0.01);
	float weigth1 = 80.0 / (abs(height -  6.0) + 0.01);
	float weigth2 = 80.0 / (abs(height - 20.0) + 0.01);
	float weigth3 = 0.0;

	vec4 texture_color = vec4(0,0,0,0);
	texture_color += weigth0 * texture2D(baseMap0, gl_TexCoord[0].st);
	texture_color += weigth1 * texture2D(baseMap1, gl_TexCoord[1].st);
	texture_color += weigth2 * texture2D(baseMap2, gl_TexCoord[2].st);
	texture_color += weigth3 * texture2D(baseMap3, gl_TexCoord[3].st);
	texture_color /= (weigth0 + weigth1 + weigth2 + weigth3);

	gl_FragData[0] = texture_color * light_color;
}

