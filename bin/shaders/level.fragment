varying vec4 diffuse[3],ambientGlobal;
varying vec3 normal,lightDir[3],halfVector[3];
varying float dist[3];
varying vec2 varTexCoord;


uniform sampler2D baseMap;

void main()
{
	vec3 n,halfV,viewV,ldir;
	float NdotL,NdotHV;
	vec4 color = ambientGlobal;
	float att;
	
	n = normalize(normal);
	
	for(int i=0; i<3; i++)
	{
		NdotL = max(dot(n,normalize(lightDir[i])), 0.0);
		
		att = 1.0 / (0.0001 + gl_LightSource[i].constantAttenuation + gl_LightSource[i].linearAttenuation * dist[i] +
		gl_LightSource[i].quadraticAttenuation * dist[i] * dist[i]);
		
		color += att * (diffuse[i] * NdotL);
		
		halfV = normalize(halfVector[i]);
		NdotHV = max(dot(n,halfV),0.0);
		color += att * gl_FrontMaterial.specular * gl_LightSource[i].specular * NdotHV;
	}
	
	gl_FragColor = color * texture2D(baseMap, varTexCoord);
}
