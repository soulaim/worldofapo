const int MAX_ACTIVE_LIGHTS = 4;

varying vec4 diffuse[MAX_ACTIVE_LIGHTS];
varying vec3 lightDir[MAX_ACTIVE_LIGHTS];
//varying vec3 halfVector[MAX_ACTIVE_LIGHTS];
varying float dist[MAX_ACTIVE_LIGHTS];
varying vec4 ambientGlobal;
varying vec3 normal;

varying vec2 varTexCoord;

uniform sampler2D baseMap;

void main()
{
	//vec3 halfV;
	vec3 n;
	float NdotL; // lambert term, i think
	vec4 color = ambientGlobal;
	float att;
	
	n = normalize(normal);
	
	for(int i = 0; i < MAX_ACTIVE_LIGHTS; ++i)
	{
		NdotL = max(dot(n, normalize(lightDir[i])), 0.0);
		att = 1.0 / (0.0001 + 0.0006 * dist[i] * dist[i]);
		color += att * (diffuse[i] * NdotL);
		
		//halfV = normalize(halfVector[i]);
		//float shininess = pow(max(dot(n, halfV), 0.0), 10);
		//color += vec4(1, 1, 1, 1) * shininess;
	}
	
	gl_FragColor = color * texture2D(baseMap, varTexCoord);
}

