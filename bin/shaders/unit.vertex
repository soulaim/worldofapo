varying vec2 varTexCoord;
varying vec4 vertex_position;

attribute vec2 bone_index; // Each vertex has bones.
attribute vec2 bone_weight; // And weight for each bone.

uniform mat4 bones[22];  // Array of bones that are computed (animated) on the CPU and given to the shader
uniform bool active;
uniform vec3 unit_location;
uniform float scale;

void main()
{
	vec4 vertex_position = gl_Vertex;

	int index;
	
	// The new position of the vertex is the weighted mean of the rotations and translations done by each bone.
	index = int(bone_index.x);
	vertex_position = (bones[index] * gl_Vertex) * bone_weight.x;

	index = int(bone_index.y);
	vertex_position += (bones[index] * gl_Vertex) * bone_weight.y;
	
	vertex_position.xyz *= scale;
	vertex_position.xyz += unit_location;
	
	gl_Position = gl_ModelViewProjectionMatrix * vertex_position;
	varTexCoord = vec2(gl_MultiTexCoord0);
}

