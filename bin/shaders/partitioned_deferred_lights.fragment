const int MAX_LIGHTS = 71;
uniform vec4 lights[MAX_LIGHTS * 2];
const int POSITION = 0;
const int DIFFUSE = 1;

uniform float activeLight;

uniform sampler2D texture_colors;
uniform sampler2D normals;
//uniform sampler2D positions;
uniform sampler2D depthTexture;

uniform float screen_width;
uniform float screen_height;

uniform float fullscreen;

vec4 reconstruct_position(vec2 tex)
{
//	return texture2D(positions, tex);

	float depth = texture2D(depthTexture, tex).r;
	vec4 ndc = vec4(2.0 * tex.x - 1.0, 2.0 * tex.y - 1.0, 2.0 * depth - 1.0, 1);
	vec4 homogeneous = gl_ModelViewProjectionMatrixInverse * ndc;
	return vec4(homogeneous.xyz / homogeneous.w,1);
}

vec4 reconstruct_eye_position(vec2 tex)
{
//	return gl_ModelViewMatrix * texture2D(positions, tex);

	float depth = texture2D(depthTexture, tex).r;
	vec4 ndc = vec4(2.0 * tex.x - 1.0, 2.0 * tex.y - 1.0, 2.0 * depth - 1.0, 1);
	vec4 homogeneous = gl_ProjectionMatrixInverse * ndc;
	return vec4(homogeneous.xyz / homogeneous.w,1);
}

void main()
{
	vec2 real_texcoord = gl_FragCoord.xy / vec2(screen_width, screen_height);

	vec3 normal = texture2D(normals, real_texcoord).rgb;
	normal = 2.0 * normal - 1.0;

	if(length(normal) < 0.5)
	{
		discard;
	}

	vec4 light_color = vec4(0,0,0,1);
	vec4 texture_color = texture2D(texture_colors, real_texcoord);

	vec4 fragment_eye_position = reconstruct_eye_position(real_texcoord);

	int lightIndex = int(activeLight);

	vec4 light_diffuse = lights[lightIndex*2 + DIFFUSE];
	vec4 light_position = lights[lightIndex*2 + POSITION];

	vec3 light_direction = vec3(light_position - fragment_eye_position);

	float dist = length(light_direction);

	float NdotL = 1.0;
	if(dist > 0.0)
	{
		light_direction /= dist;
		NdotL = dot(normal, light_direction);
	}

	if(NdotL > 0.0)
	{
		float att = 1.0 / (1.0 + 0.01 * dist * dist);
		light_color += light_diffuse * NdotL * att;
	}

	gl_FragColor = texture_color * light_color;
//	gl_FragColor = vec4(1,0,0,1);
}

