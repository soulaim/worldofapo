const int MAX_LIGHTS = 71;
uniform vec4 lights[MAX_LIGHTS * 2];
const int POSITION = 0;
const int DIFFUSE = 1;

uniform vec4 activeLights;

varying vec2 texcoord;

uniform sampler2D texture_colors;
uniform sampler2D normals;
uniform sampler2D positions;
uniform sampler2D depthTexture;

const int MAX_ACTIVE_LIGHTS = 4;

uniform vec3 ftl;
uniform vec3 ftr;
uniform vec3 fbl;
uniform vec3 fbr;

//#define OLD_LIGHTS

void main()
{
	vec4 light_color = vec4(0,0,0,1);
	vec4 texture_color = texture2D(texture_colors, texcoord);
	vec3 n = texture2D(normals, texcoord).rgb;
	n = 2.0 * n - 1.0;
//	gl_FragColor = vec4(n*0.5 + 0.5,1); return;
	vec4 ecPos = texture2D(positions, texcoord);

#ifdef OLD_LIGHTS
	int activeLight[MAX_ACTIVE_LIGHTS];
	activeLight[0] = int(activeLights.x);
	activeLight[1] = int(activeLights.y);
	activeLight[2] = int(activeLights.z);
	activeLight[3] = int(activeLights.w);

	for(int i = 0; i < MAX_ACTIVE_LIGHTS; ++i)
	{
		int lightIndex = activeLight[i];
#else
	for(int i = 0; i < 21; ++i)
	{
		int lightIndex = i;
#endif
		vec4 dif = lights[lightIndex*2 + DIFFUSE];
		vec4 pos = lights[lightIndex*2 + POSITION];

		vec3 aux = vec3(gl_ModelViewMatrix * (pos - ecPos));

		float dist = length(aux);
		vec3 lightDir = normalize(aux);

		float NdotL = dot(n, normalize(lightDir));

		if(NdotL > 0.0)
		{
			float att = 1.0 / (1.0 + 0.006 * dist * dist);
			light_color += dif * NdotL * att;
		}
	}
	
	gl_FragColor = texture_color * light_color;
}

