

uniform sampler2D texture_colors;
uniform sampler2D normals;
uniform sampler2D depthTexture;

uniform vec4 lights[142];
uniform vec3 camera_position;
uniform vec3 camera_target;

uniform float light_count;

varying vec3 fragment_direction;
varying vec2 texcoord;

vec4 reconstruct_position(vec2 tex)
{
	float depth = texture2D(depthTexture, tex).r;
	vec4 ndc = vec4(2.0 * tex.x - 1.0, 2.0 * tex.y - 1.0, 2.0 * depth - 1.0, 1);
	vec4 homogeneous = gl_ModelViewProjectionMatrixInverse * ndc;
	return vec4(homogeneous.xyz / homogeneous.w,1);
}

vec4 reconstruct_eye_position(vec2 tex)
{
	float depth = texture2D(depthTexture, tex).r;
	vec4 ndc = vec4(2.0 * tex.x - 1.0, 2.0 * tex.y - 1.0, 2.0 * depth - 1.0, 1);
	vec4 homogeneous = gl_ProjectionMatrixInverse * ndc;
	return vec4(homogeneous.xyz / homogeneous.w,1);
}

void main()
{
	vec4 light_color = vec4(0,0,0,1);
	vec4 texture_color = texture2D(texture_colors, texcoord);
	vec3 normal = texture2D(normals, texcoord).rgb;
	normal = 2.0 * normal - 1.0;

	vec4 fragment_eye_position = reconstruct_eye_position(texcoord);

	int light_counti = int(light_count);
	for(int i = 0; i < light_counti; ++i)
	{
		int lightIndex = i;

		vec4 light_diffuse = lights[lightIndex*2.0 + 1.0];
		vec4 light_position = lights[lightIndex*2.0];

		vec3 light_direction = vec3(light_position - fragment_eye_position);

		float dist = length(light_direction);
		vec3 lightDir = normalize(light_direction);

		float NdotL = 1.0;
		if(dist > 0.0)
		{
			NdotL = dot(normal, normalize(lightDir));
		}

		if(NdotL > 0.0)
		{
			float att = 1.0 / (1.0 + 0.01 * dist * dist);
			light_color += light_diffuse * NdotL * att;
		}
	}

	gl_FragColor = texture_color * light_color;
}

